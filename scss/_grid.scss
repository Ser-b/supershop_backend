// --------------------------------------------------
// Grid system
// --------------------------------------------------

// Grid implementation
// --------------------------------------------------

// Grid definition vars
$gridColumns: 12;

// mobile first defaults
.row {
	margin-right: 0;
	margin-left: 0;
	@include pie-clearfix();
}

// Common styles for small and large grid columns
.s1,
.s2,
.s3,
.s4,
.s5,
.s6,
.s7,
.s8,
.s9,
.s10,
.s11,
.s12,
.m1,
.m2,
.m3,
.m4,
.m5,
.m6,
.m7,
.m8,
.m9,
.m10,
.m11,
.m12,
.l1,
.l2,
.l3,
.l4,
.l5,
.l6,
.l7,
.l8,
.l9,
.l10,
.l11,
.l12,
.xl1,
.xl2,
.xl3,
.xl4,
.xl5,
.xl6,
.xl7,
.xl8,
.xl9,
.xl10,
.xl11,
.xl12 {
	position: relative;
	padding-right: 0;
	// Prevent columns from Lapsing when empty
	min-height: 1px;
	// Inner gutter via padding
	padding-left: 0;
}

// Clearfix for 100% width columns
@media (max-width: $middle) {
	.s12 {
		clear: both;
	}
}

@media only screen and (min-width: $middle +1) and (max-width: $large) {
	.m12 {
		clear: both;
	}
}

@media only screen and (min-width: $middle + 1) and (max-width: $extraLarge) {
	.l12 {
		clear: both;
	}
}

@media only screen and (min-width: $middle + 1) {
	.xl12 {
		clear: both;
	}
}

// Extra small grid
// -------------------------

// Grid classes for extra small devices like smartphones. No offset, push, or
// pull classes are present here due to the size of the target.
//
// Note that `.S12` doesn't get floated on purpose--there's no need since
// it's full-width.

.s1,
.s2,
.s3,
.s4,
.s5,
.s6,
.s7,
.s8,
.s9,
.s10,
.s11 {
	float: left;
}

.s1 {
	width: percentage((1 / $gridColumns));
}

.s2 {
	width: percentage((2 / $gridColumns));
}

.s3 {
	width: percentage((3 / $gridColumns));
}

.s4 {
	width: percentage((4 / $gridColumns));
}

.s5 {
	width: percentage((5 / $gridColumns));
}

.s6 {
	width: percentage((6 / $gridColumns));
}

.s7 {
	width: percentage((7 / $gridColumns));
}

.s8 {
	width: percentage((8 / $gridColumns));
}

.s9 {
	width: percentage((9 / $gridColumns));
}

.s10 {
	width: percentage((10/ $gridColumns));
}

.s11 {
	width: percentage((11/ $gridColumns));
}

.s12 {
	width: 100%;
}

// Small grid
// -------------------------

// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.
//
// Note that `.M12` doesn't get floated on purpose--there's no need since
// it's full-width.

@media (min-width: $middle + 1) {

	.m1,
	.m2,
	.m3,
	.m4,
	.m5,
	.m6,
	.m7,
	.m8,
	.m9,
	.m10,
	.m11 {
		float: left;
	}
	.m1 {
		width: percentage((1 / $gridColumns));
	}
	.m2 {
		width: percentage((2 / $gridColumns));
	}
	.m3 {
		width: percentage((3 / $gridColumns));
	}
	.m4 {
		width: percentage((4 / $gridColumns));
	}
	.m5 {
		width: percentage((5 / $gridColumns));
	}
	.m6 {
		width: percentage((6 / $gridColumns));
	}
	.m7 {
		width: percentage((7 / $gridColumns));
	}
	.m8 {
		width: percentage((8 / $gridColumns));
	}
	.m9 {
		width: percentage((9 / $gridColumns));
	}
	.m10 {
		width: percentage((10/ $gridColumns));
	}
	.m11 {
		width: percentage((11/ $gridColumns));
	}
	.m12 {
		width: 100%;
	}

	// Push and pull columns for source order changes
	.MPush1 {
		left: percentage((1 / $gridColumns));
	}
	.MPush2 {
		left: percentage((2 / $gridColumns));
	}
	.MPush3 {
		left: percentage((3 / $gridColumns));
	}
	.MPush4 {
		left: percentage((4 / $gridColumns));
	}
	.MPush5 {
		left: percentage((5 / $gridColumns));
	}
	.MPush6 {
		left: percentage((6 / $gridColumns));
	}
	.MPush7 {
		left: percentage((7 / $gridColumns));
	}
	.MPush8 {
		left: percentage((8 / $gridColumns));
	}
	.MPush9 {
		left: percentage((9 / $gridColumns));
	}
	.MPush10 {
		left: percentage((10/ $gridColumns));
	}
	.MPush11 {
		left: percentage((11/ $gridColumns));
	}

	.MPull1 {
		right: percentage((1 / $gridColumns));
	}
	.MPull2 {
		right: percentage((2 / $gridColumns));
	}
	.MPull3 {
		right: percentage((3 / $gridColumns));
	}
	.MPull4 {
		right: percentage((4 / $gridColumns));
	}
	.MPull5 {
		right: percentage((5 / $gridColumns));
	}
	.MPull6 {
		right: percentage((6 / $gridColumns));
	}
	.MPull7 {
		right: percentage((7 / $gridColumns));
	}
	.MPull8 {
		right: percentage((8 / $gridColumns));
	}
	.MPull9 {
		right: percentage((9 / $gridColumns));
	}
	.MPull10 {
		right: percentage((10/ $gridColumns));
	}
	.MPull11 {
		right: percentage((11/ $gridColumns));
	}

	// Offsets
	.MOffset1 {
		margin-left: percentage((1 / $gridColumns));
	}
	.MOffset2 {
		margin-left: percentage((2 / $gridColumns));
	}
	.MOffset3 {
		margin-left: percentage((3 / $gridColumns));
	}
	.MOffset4 {
		margin-left: percentage((4 / $gridColumns));
	}
	.MOffset5 {
		margin-left: percentage((5 / $gridColumns));
	}
	.MOffset6 {
		margin-left: percentage((6 / $gridColumns));
	}
	.MOffset7 {
		margin-left: percentage((7 / $gridColumns));
	}
	.MOffset8 {
		margin-left: percentage((8 / $gridColumns));
	}
	.MOffset9 {
		margin-left: percentage((9 / $gridColumns));
	}
	.MOffset10 {
		margin-left: percentage((10/ $gridColumns));
	}
	.MOffset11 {
		margin-left: percentage((11/ $gridColumns));
	}
}

// Medium grid
// -------------------------

// Columns, offsets, pushes, and pulls for the desktop device range.
//
// Note that `.L12` doesn't get floated on purpose--there's no need since
// it's full-width.

@media (min-width: $large + 1) {

	.l1,
	.l2,
	.l3,
	.l4,
	.l5,
	.l6,
	.l7,
	.l8,
	.l9,
	.l10,
	.l11 {
		float: left;
	}
	.l1 {
		width: percentage((1 / $gridColumns));
	}
	.l2 {
		width: percentage((2 / $gridColumns));
	}
	.l3 {
		width: percentage((3 / $gridColumns));
	}
	.l4 {
		width: percentage((4 / $gridColumns));
	}
	.l5 {
		width: percentage((5 / $gridColumns));
	}
	.l6 {
		width: percentage((6 / $gridColumns));
	}
	.l7 {
		width: percentage((7 / $gridColumns));
	}
	.l8 {
		width: percentage((8 / $gridColumns));
	}
	.l9 {
		width: percentage((9 / $gridColumns));
	}
	.l10 {
		width: percentage((10/ $gridColumns));
	}
	.l11 {
		width: percentage((11/ $gridColumns));
	}
	.l12 {
		width: 100%;
	}

	// Push and pull columns for source order changes
	.LPush0 {
		left: auto;
	}
	.LPush1 {
		left: percentage((1 / $gridColumns));
	}
	.LPush2 {
		left: percentage((2 / $gridColumns));
	}
	.LPush3 {
		left: percentage((3 / $gridColumns));
	}
	.LPush4 {
		left: percentage((4 / $gridColumns));
	}
	.LPush5 {
		left: percentage((5 / $gridColumns));
	}
	.LPush6 {
		left: percentage((6 / $gridColumns));
	}
	.LPush7 {
		left: percentage((7 / $gridColumns));
	}
	.LPush8 {
		left: percentage((8 / $gridColumns));
	}
	.LPush9 {
		left: percentage((9 / $gridColumns));
	}
	.LPush10 {
		left: percentage((10/ $gridColumns));
	}
	.LPush11 {
		left: percentage((11/ $gridColumns));
	}

	.LPull0 {
		right: auto;
	}
	.LPull1 {
		right: percentage((1 / $gridColumns));
	}
	.LPull2 {
		right: percentage((2 / $gridColumns));
	}
	.LPull3 {
		right: percentage((3 / $gridColumns));
	}
	.LPull4 {
		right: percentage((4 / $gridColumns));
	}
	.LPull5 {
		right: percentage((5 / $gridColumns));
	}
	.LPull6 {
		right: percentage((6 / $gridColumns));
	}
	.LPull7 {
		right: percentage((7 / $gridColumns));
	}
	.LPull8 {
		right: percentage((8 / $gridColumns));
	}
	.LPull9 {
		right: percentage((9 / $gridColumns));
	}
	.LPull10 {
		right: percentage((10/ $gridColumns));
	}
	.LPull11 {
		right: percentage((11/ $gridColumns));
	}

	// Offsets
	.LOffset0 {
		margin-left: 0;
	}
	.LOffset1 {
		margin-left: percentage((1 / $gridColumns));
	}
	.LOffset2 {
		margin-left: percentage((2 / $gridColumns));
	}
	.LOffset3 {
		margin-left: percentage((3 / $gridColumns));
	}
	.LOffset4 {
		margin-left: percentage((4 / $gridColumns));
	}
	.LOffset5 {
		margin-left: percentage((5 / $gridColumns));
	}
	.LOffset6 {
		margin-left: percentage((6 / $gridColumns));
	}
	.LOffset7 {
		margin-left: percentage((7 / $gridColumns));
	}
	.LOffset8 {
		margin-left: percentage((8 / $gridColumns));
	}
	.LOffset9 {
		margin-left: percentage((9 / $gridColumns));
	}
	.LOffset10 {
		margin-left: percentage((10/ $gridColumns));
	}
	.LOffset11 {
		margin-left: percentage((11/ $gridColumns));
	}
}

// Large grid
// -------------------------

// Columns, offsets, pushes, and pulls for the large desktop device range.
//
// Note that `.XL12` doesn't get floated on purpose--there's no need since
// it's full-width.

@media (min-width: $extraLarge + 1) {

	.xl1,
	.xl2,
	.xl3,
	.xl4,
	.xl5,
	.xl6,
	.xl7,
	.xl8,
	.xl9,
	.xl10,
	.xl11 {
		float: left;
	}
	.xl1 {
		width: percentage((1 / $gridColumns));
	}
	.xl2 {
		width: percentage((2 / $gridColumns));
	}
	.xl3 {
		width: percentage((3 / $gridColumns));
	}
	.xl4 {
		width: percentage((4 / $gridColumns));
	}
	.xl5 {
		width: percentage((5 / $gridColumns));
	}
	.xl6 {
		width: percentage((6 / $gridColumns));
	}
	.xl7 {
		width: percentage((7 / $gridColumns));
	}
	.xl8 {
		width: percentage((8 / $gridColumns));
	}
	.xl9 {
		width: percentage((9 / $gridColumns));
	}
	.xl10 {
		width: percentage((10/ $gridColumns));
	}
	.xl11 {
		width: percentage((11/ $gridColumns));
	}
	.xl12 {
		width: 100%;
	}

	// Push and pull columns for source order changes
	.XLPush0 {
		left: auto;
	}
	.XLPush1 {
		left: percentage((1 / $gridColumns));
	}
	.XLPush2 {
		left: percentage((2 / $gridColumns));
	}
	.XLPush3 {
		left: percentage((3 / $gridColumns));
	}
	.XLPush4 {
		left: percentage((4 / $gridColumns));
	}
	.XLPush5 {
		left: percentage((5 / $gridColumns));
	}
	.XLPush6 {
		left: percentage((6 / $gridColumns));
	}
	.XLPush7 {
		left: percentage((7 / $gridColumns));
	}
	.XLPush8 {
		left: percentage((8 / $gridColumns));
	}
	.XLPush9 {
		left: percentage((9 / $gridColumns));
	}
	.XLPush10 {
		left: percentage((10/ $gridColumns));
	}
	.XLPush11 {
		left: percentage((11/ $gridColumns));
	}

	.XLPull0 {
		right: auto;
	}
	.XLPull1 {
		right: percentage((1 / $gridColumns));
	}
	.XLPull2 {
		right: percentage((2 / $gridColumns));
	}
	.XLPull3 {
		right: percentage((3 / $gridColumns));
	}
	.XLPull4 {
		right: percentage((4 / $gridColumns));
	}
	.XLPull5 {
		right: percentage((5 / $gridColumns));
	}
	.XLPull6 {
		right: percentage((6 / $gridColumns));
	}
	.XLPull7 {
		right: percentage((7 / $gridColumns));
	}
	.XLPull8 {
		right: percentage((8 / $gridColumns));
	}
	.XLPull9 {
		right: percentage((9 / $gridColumns));
	}
	.XLPull10 {
		right: percentage((10/ $gridColumns));
	}
	.XLPull11 {
		right: percentage((11/ $gridColumns));
	}

	// Offsets
	.XLOffset0 {
		margin-left: 0;
	}
	.XLOffset1 {
		margin-left: percentage((1 / $gridColumns));
	}
	.XLOffset2 {
		margin-left: percentage((2 / $gridColumns));
	}
	.XLOffset3 {
		margin-left: percentage((3 / $gridColumns));
	}
	.XLOffset4 {
		margin-left: percentage((4 / $gridColumns));
	}
	.XLOffset5 {
		margin-left: percentage((5 / $gridColumns));
	}
	.XLOffset6 {
		margin-left: percentage((6 / $gridColumns));
	}
	.XLOffset7 {
		margin-left: percentage((7 / $gridColumns));
	}
	.XLOffset8 {
		margin-left: percentage((8 / $gridColumns));
	}
	.XLOffset9 {
		margin-left: percentage((9 / $gridColumns));
	}
	.XLOffset10 {
		margin-left: percentage((10/ $gridColumns));
	}
	.XLOffset11 {
		margin-left: percentage((11/ $gridColumns));
	}
}

// New way of creating gutters
// --------------------------------------------------

.gutter {
	margin-right: -1 * (10px);
	margin-left: -1 * (10px);
	@media screen and (max-width: $middle) {
		margin-right: -1 * (5px);
		margin-left: -1 * (5px);
	}
	> div {
		padding-right: (10px);
		padding-left: (10px);
		@media screen and (max-width: $middle) {
			padding-right: (5px);
			padding-left: (5px);
		}
	}
}